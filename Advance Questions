-- QUESTION 1 --

CREATE OR REPLACE TABLE SHOPPING_HISTORY(
PRODUCT VARCHAR NOT NULL,
QUANTITY INTEGER NOT NULL,
UNIT_PRICE INTEGER NOT NULL
);

INSERT INTO SHOPPING_HISTORY(PRODUCT, QUANTITY,UNIT_PRICE)
VALUES('milk',2,4),('eggs',20,2),('bread',10,3),('eggs',20,3),('milk',1,7),('cornflakes',10,6),('biscuits',10,3),('milk',20,3);

SELECT PRODUCT, SUM(QUANTITY*UNIT_PRICE) AS TOTAL_AMOUNT_SPEND
FROM SHOPPING_HISTORY
GROUP BY PRODUCT
ORDER BY PRODUCT DESC;



-- QUESTION 2 --

CREATE OR REPLACE TABLE PHONES(
NAME VARCHAR(20) NOT NULL UNIQUE,
PHONE_NUMBER INTEGER NOT NULL UNIQUE);

CREATE OR REPLACE TABLE CALLS(
ID INTEGER NOT NULL,
CALLER INTEGER NOT NULL,
CALLEE INTEGER NOT NULL,
DURATION INTEGER NOT NULL,
UNIQUE(ID)
);


INSERT INTO PHONES
VALUES('JACK',1234),('LENA',3333),('MARK',9999),('ANNA',7582),('JOHN',6356),('ADDISON',4315),('KATE',8003),('GINNY',9831);


INSERT INTO CALLS
VALUES(25,1234,7582,8),(7,9999,7582,1),(18,9999,3333,4),(2,7582,3333,3),(3,3333,1234,1),(21,3333,1234,1),(65,8003,9831,7),(100,9831,8003,3),(145,4315,9831,18);



WITH DURATIONS AS (
    SELECT  DURATION,CALLER AS PHONE_NUMBER 
    FROM CALLS
    UNION ALL
    SELECT  DURATION, CALLEE AS PHONE_NUMBER 
    FROM CALLS
)

SELECT P.NAME, SUM(D.DURATION) AS TOTAL_DURATION
FROM PHONES P
JOIN DURATIONS D 
  ON P.PHONE_NUMBER = D.PHONE_NUMBER
GROUP BY P.NAME
HAVING SUM(D.DURATION) >= 10;



SELECT p.name, SUM(c.duration) AS total_duration
FROM phones p
JOIN calls c 
  ON p.phone_number = c.caller 
  OR p.phone_number = c.callee
GROUP BY p.name
HAVING SUM(c.duration) >= 10;


-- QUESTION 3 --

CREATE OR REPLACE TABLE TRANSACTIONS (
    AMOUNT INT NOT NULL,
    DATE DATE NOT NULL
);


INSERT INTO transactions (amount, date) VALUES
(1000, '2020-01-06'),
(-10, '2020-01-14'),
(-75, '2020-01-20'),
(-5, '2020-01-25'),
(-4, '2020-01-29'),
(2000, '2020-03-10'),
(-75, '2020-03-12'),
(-20, '2020-03-15'),
(-40, '2020-03-15'),
(-50, '2020-03-17'),
(200, '2020-10-10'),
(-200, '2020-10-10');

WITH monthly AS (
    SELECT 
        EXTRACT(YEAR FROM date) AS yr,
        EXTRACT(MONTH FROM date) AS mn,
        SUM(amount) AS monthly_sum,
        COUNT(CASE WHEN amount < 0 THEN 1 END) AS cc_count,
        SUM(CASE WHEN amount < 0 THEN -amount ELSE 0 END) AS cc_total
    FROM transactions
    GROUP BY EXTRACT(YEAR FROM date), EXTRACT(MONTH FROM date)
),
fees AS (
    SELECT 
        SUM(
            CASE 
                WHEN cc_count >= 3 AND cc_total >= 100 THEN 0 
                ELSE 5 
            END
        ) AS total_fee
    FROM monthly
),
total_balance AS (
    SELECT SUM(amount) AS raw_balance FROM transactions
)
SELECT 
    raw_balance - total_fee AS balance
FROM total_balance, fees;


